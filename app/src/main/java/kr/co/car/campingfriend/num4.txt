package kr.co.car.campingfriend

import android.annotation.SuppressLint
import android.content.SharedPreferences
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Rect
import android.util.Log
import androidx.camera.core.ImageAnalysis
import androidx.camera.core.ImageProxy
import com.google.mlkit.vision.common.InputImage
import com.google.mlkit.vision.text.Text
import com.google.mlkit.vision.text.TextRecognizer
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import org.json.JSONException
import org.json.JSONObject
import java.io.ByteArrayOutputStream
import java.io.IOException
import java.util.concurrent.atomic.AtomicBoolean
import java.util.regex.Pattern

class ImprovedLicensePlateDetectionProcessor(
    private val textRecognizer: TextRecognizer,
    private val plateNumberListener: (String) -> Unit,
    private val serverStatusListener: (String) -> Unit,
    val sharedPreferences: SharedPreferences
) : ImageAnalysis.Analyzer {

    private val client = OkHttpClient()
    private val isProcessing = AtomicBoolean(false)
    private var lastDetectedPlate = ""
    private var lastDetectionTime = 0L
    private var lastSentTime = 0L

    // 최근 인식 결과 저장을 위한 맵 (번호판 -> 카운트)
    private val recentDetections = mutableMapOf<String, Int>()
    private val MAX_RECENT_DETECTIONS = 10
    private val CONFIDENCE_THRESHOLD = 0.7f //신뢰도

    @SuppressLint("UnsafeOptInUsageError")
    override fun analyze(imageProxy: ImageProxy) {
        if (isProcessing.get()) {
            imageProxy.close()
            return
        }

        val mediaImage = imageProxy.image ?: run {
            imageProxy.close()
            return
        }

        isProcessing.set(true)

        val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)

        textRecognizer.process(image)
            .addOnSuccessListener { text ->
                processTextRecognitionResult(text, imageProxy)
                isProcessing.set(false)
            }
            .addOnFailureListener { e ->
                Log.e(TAG, "텍스트 인식 실패", e)
                isProcessing.set(false)
                imageProxy.close()
            }
    }

    private fun processTextRecognitionResult(text: Text, imageProxy: ImageProxy) {
        val possiblePlates = findPossibleLast4Digits(text)

        if (possiblePlates.isNotEmpty()) {
            // 신뢰도가 가장 높은 번호판 선택
            val (bestPlate, confidence) = possiblePlates.maxByOrNull { it.second } ?: Pair("", 0f)

            if (bestPlate.isNotEmpty() && confidence >= CONFIDENCE_THRESHOLD) {
                Log.d(TAG, "번호판 뒷 4자리 인식됨: $bestPlate (신뢰도: $confidence)")

                val currentTime = System.currentTimeMillis()

                // 번호판 중복 감지 방지 로직 (이전 검출된 번호판과 같은경우 무시)
                if (bestPlate == lastDetectedPlate) {
                    Log.d(TAG, "이전번호와 동일, 무시: $bestPlate")
                    serverStatusListener("이전번호와 동일")
                    imageProxy.close()
                    return
                }

                // 다중 프레임 검증 로직
                updateRecentDetections(bestPlate)
                val detectionCount = recentDetections[bestPlate] ?: 0

                if (detectionCount >= 2 || confidence > 0.85f) {
                    lastDetectedPlate = bestPlate
                    lastDetectionTime = currentTime
                    plateNumberListener(bestPlate)

                    when (IMAGE_SEND_MODE) {
                        "NONE" -> sendTextOnly(bestPlate)
                        "FULL_FRAME" -> sendFullFrame(bestPlate, imageProxy)
                        "CROPPED_PLATE" -> sendCroppedPlateImage(bestPlate, text, imageProxy)
                    }
                } else {
                    Log.d(TAG, "신뢰도 부족, 무시: $bestPlate (카운트: $detectionCount, 신뢰도: $confidence)")
                }
            }
        }
        imageProxy.close()
    }

    private fun updateRecentDetections(plate: String) {
        // 기존 카운트 가져오기
        val count = recentDetections[plate] ?: 0
        recentDetections[plate] = count + 1

        // 맵 크기 제한
        if (recentDetections.size > MAX_RECENT_DETECTIONS) {
            // 카운트가 가장 작은 항목 제거
            val minEntry = recentDetections.minByOrNull { it.value }
            minEntry?.let { recentDetections.remove(it.key) }
        }
    }

    private fun findPossibleLast4Digits(text: Text): List<Pair<String, Float>> {
        val possiblePlates = mutableListOf<Pair<String, Float>>()

        // 4자리 숫자 패턴 (끝에 있는 4자리만 추출)
        val fourDigitPattern = Pattern.compile("\\d{4}")

        // 전체 텍스트에서 4자리 숫자 추출
        val fullText = text.text
        val matcher = fourDigitPattern.matcher(fullText)
        while (matcher.find()) {
            val fourDigits = matcher.group()
            possiblePlates.add(Pair(fourDigits, 0.8f))  // 기본 신뢰도 부여
        }

        // 블록별 세부 분석 (더 높은 신뢰도 부여)
        for (block in text.textBlocks) {
            for (line in block.lines) {
                val lineText = line.text.replace("\\s+".toRegex(), "")

                val matcher = fourDigitPattern.matcher(lineText)
                while (matcher.find()) {
                    val fourDigits = matcher.group()
                    var confidence = calculateConfidence(line)

                    // 이미 목록에 있다면 신뢰도 높임
                    val existingIndex = possiblePlates.indexOfFirst { it.first == fourDigits }
                    if (existingIndex >= 0) {
                        // 더 높은 신뢰도로 업데이트
                        if (confidence > possiblePlates[existingIndex].second) {
                            possiblePlates[existingIndex] = Pair(fourDigits, confidence)
                        }
                    } else {
                        possiblePlates.add(Pair(fourDigits, confidence))
                    }
                }
            }
        }

        // 중복 제거 및 신뢰도 기준 정렬
        return possiblePlates.distinctBy { it.first }
    }

    private fun calculateConfidence(line: Text.Line): Float {
        // 4자리 숫자 신뢰도 계산을 위한 간단한 휴리스틱
        val boundingBox = line.boundingBox ?: return 0.5f // 기본값

        // 텍스트 길이 확인 (4자리 숫자에 가까울수록 높은 신뢰도)
        val textLength = line.text.replace("\\s+".toRegex(), "").length
        val lengthConfidence = if (textLength >= 4 && textLength <= 8) 0.3f else 0.1f

        // 경계 상자 확인 (번호판 비율에 가까울수록 높은 신뢰도)
        val width = boundingBox.width()
        val height = boundingBox.height()
        val aspectRatio = width.toFloat() / height.toFloat()
        val aspectConfidence = if (aspectRatio in 2.0f..5.0f) 0.3f else 0.1f

        // 숫자 밀도 확인
        val charDensity = textLength.toFloat() / width
        val densityConfidence = if (charDensity in 0.05f..0.15f) 0.2f else 0.1f

        // 결과 텍스트가 숫자로만 구성되어 있으면 추가 신뢰도
        val isAllDigits = line.text.replace("\\s+".toRegex(), "").all { it.isDigit() }
        val digitConfidence = if (isAllDigits) 0.2f else 0.1f

        return lengthConfidence + aspectConfidence + densityConfidence + digitConfidence
    }

    private fun findPlateRegion(text: Text): Rect? {
        var bestRect: Rect? = null
        var highestConfidence = 0f

        for (block in text.textBlocks) {
            for (line in block.lines) {
                val lineText = line.text.replace("\\s+".toRegex(), "")

                // 4자리 숫자 패턴 검색
                val matcher = Pattern.compile("\\d{4}").matcher(lineText)
                if (matcher.find()) {
                    val confidence = calculateConfidence(line)
                    if (confidence > highestConfidence) {
                        highestConfidence = confidence
                        bestRect = line.boundingBox
                    }
                }
            }
        }

        // 번호판 영역을 약간 확장 (더 넓은 컨텍스트 포함)
        bestRect?.let {
            val expandedRect = Rect(
                it.left - (it.width() * 0.1).toInt().coerceAtLeast(0),
                it.top - (it.height() * 0.2).toInt().coerceAtLeast(0),
                it.right + (it.width() * 0.1).toInt(),
                it.bottom + (it.height() * 0.2).toInt()
            )
            return expandedRect
        }

        return bestRect
    }

    private fun sendTextOnly(licensePlate: String) {
        if (licensePlate.isEmpty()) {
            serverStatusListener("전송 실패: 번호판 텍스트 없음")
            return
        }

        // 기존 저장된 캠핑장 ID 불러오기
        val savedCampingId = getSavedCampingId()

        val jsonObject = JSONObject().apply {
            put("licensePlate", licensePlate)  // 4자리 숫자만 전송
            put("timestamp", System.currentTimeMillis())
            put("deviceId", android.os.Build.MODEL)
            put("camping_id", savedCampingId)
        }

        val requestBody = MultipartBody.Builder()
            .setType(MultipartBody.FORM)
            .addFormDataPart("data", jsonObject.toString())
            .build()

        sendRequest(requestBody)
    }

    private fun getSavedCampingId(): String {
        return sharedPreferences.getString("camping_id", "") ?: "없음"
    }

    private fun sendFullFrame(licensePlate: String, imageProxy: ImageProxy) {
        val bitmap = imageProxy.toBitmap() ?: return
        sendWithImage(licensePlate, bitmap, "$licensePlate.jpg")
    }

    private fun sendCroppedPlateImage(licensePlate: String, text: Text, imageProxy: ImageProxy) {
        val bitmap = imageProxy.toBitmap() ?: return
        val plateRegion = findPlateRegion(text)

        if (plateRegion != null) {
            // 확인된 영역이 이미지 경계 내에 있는지 확인
            val left = plateRegion.left.coerceAtLeast(0)
            val top = plateRegion.top.coerceAtLeast(0)
            val width = plateRegion.width().coerceAtMost(bitmap.width - left)
            val height = plateRegion.height().coerceAtMost(bitmap.height - top)

            if (width > 0 && height > 0) {
                val croppedBitmap = Bitmap.createBitmap(bitmap, left, top, width, height)
                sendWithImage(licensePlate, croppedBitmap, "cropped_plate.jpg")
            } else {
                // 크롭 영역이 유효하지 않으면 전체 이미지 전송
                sendWithImage(licensePlate, bitmap, "$licensePlate.jpg")
            }
        } else {
            // 번호판 영역을 찾지 못하면 전체 이미지 전송
            sendWithImage(licensePlate, bitmap, "$licensePlate.jpg")
        }
    }

    private fun sendWithImage(licensePlate: String, imageBitmap: Bitmap, fileName: String) {
        if (licensePlate.isEmpty()) {
            serverStatusListener("전송 실패: 번호판 텍스트 없음")
            return
        }

        // 텍스트 데이터 JSON 생성
        val jsonObject = JSONObject().apply {
            put("licensePlate", licensePlate)  // 4자리 숫자만 전송
            put("timestamp", System.currentTimeMillis())
            put("deviceId", android.os.Build.MODEL)
            put("confidence", recentDetections[licensePlate] ?: 1)
            put("camping_id", getSavedCampingId())
        }

        // 이미지 데이터 바이트 배열로 변환
        val byteArrayOutputStream = ByteArrayOutputStream()
        imageBitmap.compress(Bitmap.CompressFormat.JPEG, 80, byteArrayOutputStream)
        val imageData = byteArrayOutputStream.toByteArray()

        // MultipartBody 생성 - 텍스트와 이미지 데이터를 함께 보내기
        val requestBody = MultipartBody.Builder()
            .setType(MultipartBody.FORM)
            .addFormDataPart("data", jsonObject.toString())  // 텍스트 데이터
            .addFormDataPart("image", fileName, RequestBody.create("image/jpeg".toMediaTypeOrNull(), imageData))  // 이미지 데이터
            .build()

        // 서버로 요청 보내기
        sendRequest(requestBody)
    }

    private fun sendRequest(requestBody: RequestBody) {
        val request = Request.Builder()
            .url(SERVER_URL)
            .post(requestBody)
            .build()

        serverStatusListener("서버로 전송 중...")

        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                serverStatusListener("전송 실패: ${e.message}")
            }

            override fun onResponse(call: Call, response: Response) {
                if (response.isSuccessful) {
                    val responseBody = response.body?.string()
                    try {
                        val jsonObject = JSONObject(responseBody)
                        val message = jsonObject.getString("message")
                        serverStatusListener("전송 성공: $message")
                    } catch (e: JSONException) {
                        serverStatusListener("응답 본문 파싱 오류")
                    }
                } else {
                    serverStatusListener("전송 실패: 서버 오류 ${response.code}")
                }
            }
        })
    }

    companion object {
        private const val TAG = "SimplifiedLicensePlateProcessor"
        private const val SERVER_URL = "https://admin.campingfriend.co.kr/api/license"

        private const val IMAGE_SEND_MODE = "FULL_FRAME" // 전송 모드: "NONE", "FULL_FRAME", "CROPPED_PLATE"
        private const val DETECTION_COOLDOWN_MS = 3000L
        private const val SERVER_SEND_COOLDOWN_MS = 5000L
    }
}

// 이미지 변환 확장 함수
fun ImageProxy.toBitmap(): Bitmap? {
    val buffer = planes[0].buffer
    val bytes = ByteArray(buffer.remaining())
    buffer.get(bytes)
    return BitmapFactory.decodeByteArray(bytes, 0, bytes.size)
}