package kr.co.car.campingfriend

import android.annotation.SuppressLint
import android.content.SharedPreferences
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Rect
import android.util.Log
import androidx.camera.core.ImageAnalysis
import androidx.camera.core.ImageProxy
import com.google.mlkit.vision.common.InputImage
import com.google.mlkit.vision.text.Text
import com.google.mlkit.vision.text.TextRecognizer
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import org.json.JSONException
import org.json.JSONObject
import org.opencv.android.OpenCVLoader
import org.opencv.android.Utils
import org.opencv.core.*
import org.opencv.core.Rect as OpenCVRect // ✅ OpenCV Rect에 별칭 부여
import org.opencv.imgproc.Imgproc
import org.opencv.photo.Photo
import java.io.ByteArrayOutputStream
import java.io.IOException
import java.util.concurrent.atomic.AtomicBoolean
import java.util.regex.Pattern

class ImprovedLicensePlateDetectionProcessor(
    private val textRecognizer: TextRecognizer,
    private val plateNumberListener: (String) -> Unit,
    private val serverStatusListener: (String) -> Unit,
    val sharedPreferences: SharedPreferences
) : ImageAnalysis.Analyzer {

    private val client = OkHttpClient()
    private val isProcessing = AtomicBoolean(false)
    private var lastDetectedPlate = ""
    private var lastDetectionTime = 0L
    private var lastSentTime = 0L

    // OpenCV 초기화
    init {
        if (!OpenCVLoader.initDebug()) {
            Log.e(TAG, "OpenCV 초기화 실패")
        } else {
            Log.d(TAG, "OpenCV 초기화 성공")
        }
    }

    // 최근 인식 결과 저장을 위한 맵 (번호판 -> 카운트)
    private val recentDetections = mutableMapOf<String, Int>()
    private val MAX_RECENT_DETECTIONS = 10
    private val CONFIDENCE_THRESHOLD = 0.7f //신뢰도

    @SuppressLint("UnsafeOptInUsageError")
    override fun analyze(imageProxy: ImageProxy) {
        if (isProcessing.get()) {
            imageProxy.close()
            return
        }

        val mediaImage = imageProxy.image ?: run {
            imageProxy.close()
            return
        }

        isProcessing.set(true)

        // 이미지를 비트맵으로 변환
        val bitmap = imageProxy.toBitmap() ?: run {
            isProcessing.set(false)
            imageProxy.close()
            return
        }

        // OpenCV로 이미지 전처리
        val processedBitmap = preprocessImageWithOpenCVs(bitmap)
        val debugResults = preprocessImageWithDebug(bitmap)
        //번호판 감지
        val debugResults1 = detectLicensePlateRegion(bitmap)

        if(processedBitmap != null){
            // 전처리된 이미지로 InputImage 생성
            val processedImage = InputImage.fromBitmap(processedBitmap, imageProxy.imageInfo.rotationDegrees)

            textRecognizer.process(processedImage)
                .addOnSuccessListener { text ->
                    processTextRecognitionResult(text, imageProxy, processedBitmap)
                    isProcessing.set(false)
                }
                .addOnFailureListener { e ->
                    Log.e(TAG, "텍스트 인식 실패", e)
                    isProcessing.set(false)
                    imageProxy.close()
                }
        }


    }


    private fun preprocessImageWithOpenCVcrop(bitmap: Bitmap): Bitmap {
        // OpenCV Mat으로 변환
        val sourceMat = Mat()
        Utils.bitmapToMat(bitmap, sourceMat)

        // 1. 그레이스케일 변환
        val grayMat = Mat()
        Imgproc.cvtColor(sourceMat, grayMat, Imgproc.COLOR_BGR2GRAY)

        // 2. 히스토그램 평활화 (대비 개선)
        Imgproc.equalizeHist(grayMat, grayMat)

        // 3. 가우시안 블러 적용 (노이즈 제거)
        Imgproc.GaussianBlur(grayMat, grayMat, Size(3.0, 3.0), 0.0)

        // 4. 번호판 영역 검출을 위한 처리
        val rectKernel = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, Size(17.0, 3.0))
        val squareKernel = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, Size(3.0, 3.0))

        // 5. 소벨 에지 검출 (수평 방향 강조)
        val gradX = Mat()
        Imgproc.Sobel(grayMat, gradX, CvType.CV_32F, 1, 0)
        Core.convertScaleAbs(gradX, gradX)
        Core.normalize(gradX, gradX, 0.0, 255.0, Core.NORM_MINMAX)

        // 6. 닫기 연산으로 번호판 영역 강화
        Imgproc.morphologyEx(gradX, gradX, Imgproc.MORPH_CLOSE, rectKernel)

        // 7. 이진화 (OTSU 방법)
        val thresh = Mat()
        Imgproc.threshold(gradX, thresh, 0.0, 255.0, Imgproc.THRESH_BINARY or Imgproc.THRESH_OTSU)

        // 8. 작은 노이즈 제거
        Imgproc.morphologyEx(thresh, thresh, Imgproc.MORPH_CLOSE, squareKernel)

        // 9. 윤곽선 검출
        val contours = ArrayList<MatOfPoint>()
        val hierarchy = Mat()
        Imgproc.findContours(thresh.clone(), contours, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE)

        // 결과 비트맵 준비 (기본값 설정)
        var resultBitmap = Bitmap.createBitmap(bitmap.width, bitmap.height, Bitmap.Config.ARGB_8888)

        // 10. 번호판 후보 필터링 및 처리
        val filteredContours = contours.filter { contour ->
            val rect = Imgproc.boundingRect(contour)
            val aspect = rect.width.toFloat() / rect.height.toFloat()
            val area = rect.width * rect.height
            val minArea = bitmap.width * bitmap.height / 400

            // 번호판 비율 및 최소 크기 조건
            area > minArea && (aspect > 2.0 && aspect < 4.5)
        }

        if (filteredContours.isNotEmpty()) {
            // 가장 큰 번호판 후보 선택
            val plateContour = filteredContours.maxByOrNull { Imgproc.contourArea(it) }

            plateContour?.let {
                val plateRect = Imgproc.boundingRect(it)

                // 번호판 영역 추출
                val plateRegion = Mat(grayMat, plateRect)

                // 추출된 영역에 적응형 이진화 적용
                val plateBinary = Mat()
                Imgproc.adaptiveThreshold(
                    plateRegion,
                    plateBinary,
                    255.0,
                    Imgproc.ADAPTIVE_THRESH_GAUSSIAN_C,
                    Imgproc.THRESH_BINARY_INV,
                    11,
                    2.0
                )

                // 문자 분리를 위한 모폴로지 연산
              //  Imgproc.morphologyEx(plateBinary, plateBinary, Imgproc.MORPH_OPEN, squareKernel)

                // 이진화된 번호판 영역만 비트맵으로 변환
                resultBitmap = Bitmap.createBitmap(plateRect.width, plateRect.height, Bitmap.Config.ARGB_8888)
                Utils.matToBitmap(plateBinary, resultBitmap)

                // 메모리 해제
                plateBinary.release()
                plateRegion.release()
            }
        } else {
            // 번호판 후보가 없는 경우, 기본 적응형 이진화 적용
            val binaryMat = Mat()
            Imgproc.adaptiveThreshold(
                grayMat,
                binaryMat,
                255.0,
                Imgproc.ADAPTIVE_THRESH_GAUSSIAN_C,
                Imgproc.THRESH_BINARY_INV,
                11,
                2.0
            )

            // 모폴로지 연산으로 노이즈 제거 및 문자 선명화
            Imgproc.morphologyEx(binaryMat, binaryMat, Imgproc.MORPH_CLOSE, squareKernel)

            // 전체 이미지를 비트맵으로 변환
            Utils.matToBitmap(binaryMat, resultBitmap)

            // 메모리 해제
            binaryMat.release()
        }

        // 메모리 해제
        sourceMat.release()
        grayMat.release()
        gradX.release()
        thresh.release()
        hierarchy.release()

        return resultBitmap
    }

    private fun preprocessImageWithDebug(bitmap: Bitmap): List<Pair<String, Bitmap>> {
        val debugImages = mutableListOf<Pair<String, Bitmap>>()
        debugImages.add("원본 이미지" to bitmap)

        // OpenCV Mat으로 변환
        val sourceMat = Mat()
        Utils.bitmapToMat(bitmap, sourceMat)

        // 1. 그레이스케일 변환
        val grayMat = Mat()
        Imgproc.cvtColor(sourceMat, grayMat, Imgproc.COLOR_BGR2GRAY)
        debugImages.add("1. 그레이스케일" to matToBitmap(grayMat))

        // 2. 히스토그램 평활화
        val histMat = grayMat.clone()
        Imgproc.equalizeHist(histMat, histMat)
        debugImages.add("2. 히스토그램 평활화" to matToBitmap(histMat))

        // 3. 노이즈 제거
        val denoiseMat = histMat.clone()
        Photo.fastNlMeansDenoising(histMat, denoiseMat)
        debugImages.add("3. 노이즈 제거" to matToBitmap(denoiseMat))

        // 4. 가우시안 블러
        val blurMat = denoiseMat.clone()
        Imgproc.GaussianBlur(denoiseMat, blurMat, Size(5.0, 5.0), 0.0)
        debugImages.add("4. 가우시안 블러" to matToBitmap(blurMat))

        // 5. 번호판 구조에 맞는 커널 정의
        val rectKernel = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, Size(13.0, 5.0))
        val squareKernel = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, Size(3.0, 3.0))

        // 6. Tophat 모폴로지 연산
        val tophat = Mat()
        Imgproc.morphologyEx(blurMat, tophat, Imgproc.MORPH_TOPHAT, rectKernel)
        debugImages.add("5. Tophat 연산" to matToBitmap(tophat))

        // 7. 소벨 에지 검출 (수평)
        val gradX = Mat()
        Imgproc.Sobel(tophat, gradX, CvType.CV_32F, 1, 0)
        Core.convertScaleAbs(gradX, gradX)
        Core.normalize(gradX, gradX, 0.0, 255.0, Core.NORM_MINMAX)
        debugImages.add("6. 소벨 에지 검출" to matToBitmap(gradX))

        // 8. 닫기 연산으로 번호판 영역 강화
        val gradXClosed = gradX.clone()
        Imgproc.morphologyEx(gradX, gradXClosed, Imgproc.MORPH_CLOSE, rectKernel)
        debugImages.add("7. 닫기 연산" to matToBitmap(gradXClosed))

        // 9. 이진화 (OTSU)
        val thresh = Mat()
        Imgproc.threshold(gradXClosed, thresh, 0.0, 255.0, Imgproc.THRESH_BINARY or Imgproc.THRESH_OTSU)
        debugImages.add("8. OTSU 이진화" to matToBitmap(thresh))

        // 10. 작은 노이즈 제거
        val threshClosed = thresh.clone()
        Imgproc.morphologyEx(thresh, threshClosed, Imgproc.MORPH_CLOSE, squareKernel)
        debugImages.add("9. 노이즈 제거" to matToBitmap(threshClosed))

        // 11. 적응형 이진화 (번호판 내부 문자 분리용)
        val binaryMat = Mat()
        Imgproc.adaptiveThreshold(
            blurMat,
            binaryMat,
            255.0,
            Imgproc.ADAPTIVE_THRESH_GAUSSIAN_C,
            Imgproc.THRESH_BINARY_INV,
            11,
            2.0
        )
        debugImages.add("10. 적응형 이진화" to matToBitmap(binaryMat))

        // 12. 윤곽선 감지 및 번호판 후보 영역 찾기
        val contours = ArrayList<MatOfPoint>()
        val hierarchy = Mat()
        Imgproc.findContours(threshClosed.clone(), contours, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE)

        // 윤곽선을 시각화하기 위한 컬러 이미지
        val contoursImage = Mat.zeros(threshClosed.size(), CvType.CV_8UC3)
        for (i in contours.indices) {
            Imgproc.drawContours(contoursImage, contours, i, Scalar(0.0, 0.0, 255.0), 2)
        }
        debugImages.add("11. 모든 윤곽선" to matToBitmap(contoursImage))

        // 13. 번호판 후보 필터링 (크기, 비율 등)
        val filteredContours = contours.filter { contour ->
            val rect = Imgproc.boundingRect(contour)
            val aspect = rect.width.toFloat() / rect.height.toFloat()
            val area = rect.width * rect.height

            // 번호판 비율 및 최소 크기 조건
            area > 1000 && (aspect > 1.0 && aspect < 6.0)
        }

        // 후보 윤곽선 시각화
        val filteredImage = Mat.zeros(threshClosed.size(), CvType.CV_8UC3)
        for (i in filteredContours.indices) {
            Imgproc.drawContours(filteredImage, filteredContours, i, Scalar(0.0, 255.0, 0.0), 2)

            // 바운딩 박스 그리기
            val rect = Imgproc.boundingRect(filteredContours[i])
            Imgproc.rectangle(filteredImage, rect.tl(), rect.br(), Scalar(255.0, 0.0, 0.0), 2)
        }
        debugImages.add("12. 번호판 후보 영역" to matToBitmap(filteredImage))

        // 14. 가장 큰 번호판 후보 처리 (있는 경우)
        if (filteredContours.isNotEmpty()) {
            val plateContour = filteredContours.maxByOrNull { Imgproc.contourArea(it) }
            plateContour?.let {
                val plateRect = Imgproc.boundingRect(it)

                // 번호판 영역 추출
                val plateRegion = Mat(blurMat, plateRect)
                debugImages.add("13. 추출된 번호판 영역" to matToBitmap(plateRegion))

                // 추출된 영역에 적응형 이진화 적용
                val plateBinary = Mat()
                Imgproc.adaptiveThreshold(
                    plateRegion,
                    plateBinary,
                    255.0,
                    Imgproc.ADAPTIVE_THRESH_GAUSSIAN_C,
                    Imgproc.THRESH_BINARY_INV,
                    11,
                    2.0
                )
                debugImages.add("14. 번호판 영역 이진화" to matToBitmap(plateBinary))

                // 문자 분리를 위한 모폴로지 연산
              //  val plateProcessed = Mat()
              //  val charKernel = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, Size(3.0, 3.0))
              //  Imgproc.morphologyEx(plateBinary, plateProcessed, Imgproc.MORPH_OPEN, charKernel)
              //  debugImages.add("15. 문자 분리" to matToBitmap(plateProcessed))
            }
        }

        // 메모리 해제
        sourceMat.release()
        grayMat.release()
        histMat.release()
        denoiseMat.release()
        blurMat.release()
        tophat.release()
        gradX.release()
        gradXClosed.release()
        thresh.release()
        threshClosed.release()
        binaryMat.release()

        return debugImages
    }

    // Mat을 Bitmap으로 변환하는 헬퍼 함수
    private fun matToBitmap(mat: Mat): Bitmap {
        val resultBitmap = Bitmap.createBitmap(mat.cols(), mat.rows(), Bitmap.Config.ARGB_8888)
        Utils.matToBitmap(mat, resultBitmap)
        return resultBitmap
    }


    private fun preprocessImageWithOpenCVs(bitmap: Bitmap): Bitmap? {
        // OpenCV Mat으로 변환
        val sourceMat = Mat()
        Utils.bitmapToMat(bitmap, sourceMat)

        // 1. 그레이스케일 변환
        val grayMat = Mat()
        Imgproc.cvtColor(sourceMat, grayMat, Imgproc.COLOR_BGR2GRAY)

        // 2. 히스토그램 평활화 (대비 개선)
        Imgproc.equalizeHist(grayMat, grayMat)

        // 3. 가우시안 블러 적용 (노이즈 제거)
        Imgproc.GaussianBlur(grayMat, grayMat, Size(3.0, 3.0), 0.0)

        // 4. 번호판 영역 검출을 위한 처리
        val rectKernel = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, Size(17.0, 3.0))
        val squareKernel = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, Size(3.0, 3.0))

        // 5. 소벨 에지 검출 (수평 방향 강조)
        val gradX = Mat()
        Imgproc.Sobel(grayMat, gradX, CvType.CV_32F, 1, 0)
        Core.convertScaleAbs(gradX, gradX)
        Core.normalize(gradX, gradX, 0.0, 255.0, Core.NORM_MINMAX)

        // 6. 닫기 연산으로 번호판 영역 강화
        Imgproc.morphologyEx(gradX, gradX, Imgproc.MORPH_CLOSE, rectKernel)

        // 7. 이진화 (OTSU 방법)
        val thresh = Mat()
        Imgproc.threshold(gradX, thresh, 0.0, 255.0, Imgproc.THRESH_BINARY or Imgproc.THRESH_OTSU)

        // 8. 작은 노이즈 제거
        Imgproc.morphologyEx(thresh, thresh, Imgproc.MORPH_CLOSE, squareKernel)

        // 9. 윤곽선 검출
        val contours = ArrayList<MatOfPoint>()
        val hierarchy = Mat()
        Imgproc.findContours(thresh.clone(), contours, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE)

        // 10. 결과 이미지 준비
        val resultMat = grayMat.clone()
        Imgproc.cvtColor(resultMat, resultMat, Imgproc.COLOR_GRAY2BGR)

        // 번호판 비트맵 (기본값 null)
        var plateBitmap: Bitmap? = null

        // 11. 번호판 후보 필터링 및 처리
        val filteredContours = contours.filter { contour ->
            val rect = Imgproc.boundingRect(contour)
            val aspect = rect.width.toFloat() / rect.height.toFloat()
            val area = rect.width * rect.height
            val minArea = bitmap.width * bitmap.height / 400

            // 번호판 비율 및 최소 크기 조건
            area > minArea && (aspect > 2.0 && aspect < 4.5)
        }

        if (filteredContours.isNotEmpty()) {
            // 가장 큰 번호판 후보 선택
            val plateContour = filteredContours.maxByOrNull { Imgproc.contourArea(it) }

            plateContour?.let {
                val plateRect = Imgproc.boundingRect(it)

                // 디버깅용으로 결과 이미지에 번호판 영역 표시
                Imgproc.rectangle(resultMat, plateRect.tl(), plateRect.br(), Scalar(0.0, 255.0, 0.0), 2)

                // 번호판 영역만 추출 (원본에서)
                val plateRoi = Mat(sourceMat, plateRect)

                // 번호판 부분만 Bitmap으로 변환
                plateBitmap = Bitmap.createBitmap(plateRect.width, plateRect.height, Bitmap.Config.ARGB_8888)
                Utils.matToBitmap(plateRoi, plateBitmap)

                // 메모리 해제
                plateRoi.release()
            }
        }

        // 메모리 해제
        sourceMat.release()
        grayMat.release()
        gradX.release()
        thresh.release()
        hierarchy.release()
        resultMat.release()

        // 번호판 영역 비트맵 반환 (없으면 null)
        return plateBitmap
    }
    private fun preprocessImageWithOpenCV(bitmap: Bitmap): Bitmap {
        // OpenCV Mat으로 변환
        val sourceMat = Mat()
        Utils.bitmapToMat(bitmap, sourceMat)

        // 1. 그레이스케일 변환
        val grayMat = Mat()
        Imgproc.cvtColor(sourceMat, grayMat, Imgproc.COLOR_BGR2GRAY)

        // 2. 히스토그램 평활화 (대비 개선)
        Imgproc.equalizeHist(grayMat, grayMat)

        // 3. 가우시안 블러 적용 (노이즈 제거)
        Imgproc.GaussianBlur(grayMat, grayMat, Size(3.0, 3.0), 0.0)

        // 4. 번호판 영역 검출을 위한 처리
        val rectKernel = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, Size(17.0, 3.0))
        val squareKernel = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, Size(3.0, 3.0))

        // 5. 소벨 에지 검출 (수평 방향 강조)
        val gradX = Mat()
        Imgproc.Sobel(grayMat, gradX, CvType.CV_32F, 1, 0)
        Core.convertScaleAbs(gradX, gradX)
        Core.normalize(gradX, gradX, 0.0, 255.0, Core.NORM_MINMAX)

        // 6. 닫기 연산으로 번호판 영역 강화
        Imgproc.morphologyEx(gradX, gradX, Imgproc.MORPH_CLOSE, rectKernel)

        // 7. 이진화 (OTSU 방법)
        val thresh = Mat()
        Imgproc.threshold(gradX, thresh, 0.0, 255.0, Imgproc.THRESH_BINARY or Imgproc.THRESH_OTSU)

        // 8. 작은 노이즈 제거
        Imgproc.morphologyEx(thresh, thresh, Imgproc.MORPH_CLOSE, squareKernel)

        // 9. 윤곽선 검출
        val contours = ArrayList<MatOfPoint>()
        val hierarchy = Mat()
        Imgproc.findContours(thresh.clone(), contours, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE)

        // 10. 결과 이미지 준비
        val resultMat = grayMat.clone()
        Imgproc.cvtColor(resultMat, resultMat, Imgproc.COLOR_GRAY2BGR)

        // 11. 번호판 후보 필터링 및 처리
        val filteredContours = contours.filter { contour ->
            val rect = Imgproc.boundingRect(contour)
            val aspect = rect.width.toFloat() / rect.height.toFloat()
            val area = rect.width * rect.height
            val minArea = bitmap.width * bitmap.height / 400

            // 번호판 비율 및 최소 크기 조건
            area > minArea && (aspect > 2.0 && aspect < 4.5)
        }

        if (filteredContours.isNotEmpty()) {
            // 가장 큰 번호판 후보 선택
            val plateContour = filteredContours.maxByOrNull { Imgproc.contourArea(it) }

            plateContour?.let {
                val plateRect = Imgproc.boundingRect(it)

                // 번호판 영역 추출
                val plateRegion = Mat(grayMat, plateRect)

                // 추출된 영역에 적응형 이진화 적용
                val plateBinary = Mat()
                Imgproc.adaptiveThreshold(
                    plateRegion,
                    plateBinary,
                    255.0,
                    Imgproc.ADAPTIVE_THRESH_GAUSSIAN_C,
                    Imgproc.THRESH_BINARY_INV,
                    11,
                    2.0
                )

                // 문자 분리를 위한 모폴로지 연산
                Imgproc.morphologyEx(plateBinary, plateBinary, Imgproc.MORPH_OPEN, squareKernel)

                // 처리된 번호판 영역을 결과 이미지에 복사
                plateBinary.copyTo(Mat(resultMat, plateRect))

                // 번호판 영역 표시 (디버깅용, 필요시 활성화)
                Imgproc.rectangle(resultMat, plateRect.tl(), plateRect.br(), Scalar(0.0, 255.0, 0.0), 2)



            }
        } else {
            // 번호판 후보가 없는 경우, 기본 적응형 이진화 적용
            val binaryMat = Mat()
            Imgproc.adaptiveThreshold(
                grayMat,
                binaryMat,
                255.0,
                Imgproc.ADAPTIVE_THRESH_GAUSSIAN_C,
                Imgproc.THRESH_BINARY_INV,
                11,
                2.0
            )

            // 모폴로지 연산으로 노이즈 제거 및 문자 선명화
            Imgproc.morphologyEx(binaryMat, binaryMat, Imgproc.MORPH_CLOSE, squareKernel)

            // 결과 복사
            Imgproc.cvtColor(binaryMat, resultMat, Imgproc.COLOR_GRAY2BGR)
        }





        // 결과 이미지를 비트맵으로 변환
        val resultBitmap = Bitmap.createBitmap(bitmap.width, bitmap.height, Bitmap.Config.ARGB_8888)
        Utils.matToBitmap(resultMat, resultBitmap)

        // 메모리 해제
        sourceMat.release()
        grayMat.release()
        gradX.release()
        thresh.release()
        hierarchy.release()

        return resultBitmap
    }

    // 추가 기능: 번호판 영역 자동 감지 및 추출
    private fun detectLicensePlateRegion(bitmap: Bitmap): Rect? {
        val sourceMat = Mat()
        Utils.bitmapToMat(bitmap, sourceMat)

        // 그레이스케일 변환
        val grayMat = Mat()
        Imgproc.cvtColor(sourceMat, grayMat, Imgproc.COLOR_BGR2GRAY)

        // 가우시안 블러
        Imgproc.GaussianBlur(grayMat, grayMat, Size(5.0, 5.0), 0.0)

        // 소벨 필터로 에지 감지
        val gradX = Mat()
        val gradY = Mat()
        Imgproc.Sobel(grayMat, gradX, CvType.CV_32F, 1, 0)
        Imgproc.Sobel(grayMat, gradY, CvType.CV_32F, 0, 1)

        // 그라디언트 계산
        val gradient = Mat()
        Core.subtract(gradX, gradY, gradient)
        Core.convertScaleAbs(gradient, gradient)

        // 이진화
        val thresh = Mat()
        Imgproc.threshold(gradient, thresh, 0.0, 255.0, Imgproc.THRESH_BINARY or Imgproc.THRESH_OTSU)

        // 모폴로지 연산
        val rectKern = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, Size(13.0, 5.0))
        val closed = Mat()
        Imgproc.morphologyEx(thresh, closed, Imgproc.MORPH_CLOSE, rectKern)

        // 윤곽선 찾기
        val contours = ArrayList<MatOfPoint>()
        val hierarchy = Mat()
        Imgproc.findContours(closed, contours, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE)

        // 번호판 후보 영역 선택
        var licensePlateRect: OpenCVRect? = null
        var maxArea = 0.0

        for (contour in contours) {
            val rect = Imgproc.boundingRect(contour)
            val aspectRatio = rect.width.toDouble() / rect.height.toDouble()
            val area = rect.width * rect.height

            // 한국 번호판 비율은 대략 4.3:1
            if (aspectRatio in 2.0..5.5 && area > maxArea && area > 1000) {
                maxArea = area.toDouble()
                licensePlateRect = rect
            }
        }

        // 메모리 해제
        sourceMat.release()
        grayMat.release()
        gradX.release()
        gradY.release()
        gradient.release()
        thresh.release()
        closed.release()
        hierarchy.release()
        for (contour in contours) {
            contour.release()
        }

        // ✅ OpenCV Rect를 Android Rect로 변환하여 반환
        return licensePlateRect?.let { rect ->
            Rect(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height)
        }
    }

    private fun processTextRecognitionResult(text: Text, imageProxy: ImageProxy, preprocessedBitmap: Bitmap) {
        Log.d(TAG, "인식된 문자 : ${text.text})")

        val possiblePlates = findPossibleLicensePlates(text)

        if (possiblePlates.isNotEmpty()) {
            // 신뢰도가 가장 높은 번호판 선택
            val (bestPlate, confidence) = possiblePlates.maxByOrNull { it.second } ?: Pair("", 0f)

            if (bestPlate.isNotEmpty() && confidence >= CONFIDENCE_THRESHOLD) {
                Log.d(TAG, "번호판 인식됨: $bestPlate (신뢰도: $confidence)")

                val currentTime = System.currentTimeMillis()

                // 번호판 중복 감지 방지 로직 (이전 검출된 번호판과 같은경우 무시)
                if (bestPlate == lastDetectedPlate) {
                    Log.d(TAG, "쿨다운 시간 내 감지됨, 무시: $bestPlate")
                    serverStatusListener("이전번호판과 동일")
                    imageProxy.close()
                    return
                }

                // 다중 프레임 검증 로직
                updateRecentDetections(bestPlate)
                val detectionCount = recentDetections[bestPlate] ?: 0

                if (detectionCount >= 3 || confidence > 0.9f) {
                    lastDetectedPlate = bestPlate
                    lastDetectionTime = currentTime
                    plateNumberListener(bestPlate)

                    when (IMAGE_SEND_MODE) {
                        "NONE" -> sendTextOnly(bestPlate)
                        "FULL_FRAME" -> sendFullFrame(bestPlate, preprocessedBitmap)
                        "CROPPED_PLATE" -> sendCroppedPlateImage(bestPlate, text, preprocessedBitmap)
                    }
                } else {
                    Log.d(TAG, "신뢰도 부족, 무시: $bestPlate (카운트: $detectionCount, 신뢰도: $confidence)")
                }
            }
        }
        imageProxy.close()
    }

    private fun updateRecentDetections(plate: String) {
        // 기존 코드와 동일
        val count = recentDetections[plate] ?: 0
        recentDetections[plate] = count + 1

        if (recentDetections.size > MAX_RECENT_DETECTIONS) {
            val minEntry = recentDetections.minByOrNull { it.value }
            minEntry?.let { recentDetections.remove(it.key) }
        }
    }

    private fun findPossibleLicensePlates(text: Text): List<Pair<String, Float>> {
        // 기존 코드와 동일
        val possiblePlates = mutableListOf<Pair<String, Float>>()

        val fullText = text.text
        val cleanText = fullText.replace("\\s+".toRegex(), "")

        val patternMatches = mutableListOf<String>()

        LICENSE_PATTERNS.forEach { pattern ->
            val matcher = pattern.matcher(fullText)
            while (matcher.find()) {
                patternMatches.add(matcher.group())
            }
        }

        LICENSE_PATTERNS.forEach { pattern ->
            val matcher = pattern.matcher(cleanText)
            while (matcher.find()) {
                val match = matcher.group()
                if (!patternMatches.contains(match)) {
                    patternMatches.add(match)
                }
            }
        }

        for (block in text.textBlocks) {
            for (line in block.lines) {
                val lineText = line.text.replace("\\s+".toRegex(), "")

                LICENSE_PATTERNS.forEach { pattern ->
                    val matcher = pattern.matcher(lineText)
                    if (matcher.find()) {
                        val match = matcher.group()
                        var confidence = calculateConfidence(line)

                        val validatedPlate = validateAndCorrectPlate(match)
                        if (validatedPlate.isNotEmpty()) {
                            possiblePlates.add(Pair(validatedPlate, confidence))
                        }
                    }
                }
            }
        }

        return possiblePlates.distinctBy { it.first }
    }

    private fun calculateConfidence(line: Text.Line): Float {
        // 기존 코드와 동일
        val boundingBox = line.boundingBox ?: return 0.5f
        val textLength = line.text.replace("\\s+".toRegex(), "").length

        val width = boundingBox.width()
        val height = boundingBox.height()

        val aspectRatio = width.toFloat() / height.toFloat()
        val aspectConfidence = if (aspectRatio in 3.5f..5.0f) 0.3f else 0.1f

        val charDensity = textLength.toFloat() / width
        val densityConfidence = if (charDensity in 0.05f..0.15f) 0.3f else 0.1f

        val patternConfidence = 0.4f

        return aspectConfidence + densityConfidence + patternConfidence
    }

    val bypassKoreanValidation = true

    private fun validateAndCorrectPlate(plate: String): String {
        // 기존 코드와 동일
        val allowedTypeChars = "가나다라마거너더러머버서어저허고노도로모보소오조호구누두루무부수우주후아바사자차카타파하배"

        val corrected = plate.trim()
            .replace("O", "0")
            .replace("I", "1")
            .replace("B", "8")
            .replace("Z", "2")
            .replace("S", "5")
            .replace("Q", "0")

        val regionCodes = listOf("서울", "경기", "인천", "강원", "충북", "충남", "대전", "경북", "경남", "부산", "울산", "대구", "전북", "전남", "광주", "제주")

        fun hasValidKoreanChars(str: String): Boolean {
            if (bypassKoreanValidation) {
                return true
            }

            val koreanCharPattern = "[가-힣]".toRegex()
            for (char in str) {
                if (char.toString().matches(koreanCharPattern)) {
                    if (char !in allowedTypeChars) {
                        Log.d(TAG, "유효하지 않은 한글 문자 발견: $char")
                        return false
                    }
                }
            }
            return true
        }

        fun OpenCVRect.toAndroidRect(): Rect {
            return Rect(this.x, this.y, this.x + this.width, this.y + this.height)
        }

        fun hasValidDigits(str: String): Boolean {
            val digitPattern = "\\d".toRegex()
            for (char in str) {
                if (char.toString().matches(digitPattern)) {
                    continue
                } else if (char.toString().matches("[가-힣]".toRegex())) {
                    continue
                } else {
                    Log.d(TAG, "유효하지 않은 문자 발견: $char")
                    return false
                }
            }
            return true
        }

        if (!hasValidKoreanChars(corrected) || !hasValidDigits(corrected)) {
            return ""
        }

        if (NEW_CAR_PATTERN.matcher(corrected).matches()) {
            val hangulChar = corrected.filter { it.toString().matches("[가-힣]".toRegex()) }.firstOrNull()
            if (hangulChar != null && hangulChar in allowedTypeChars) {
                return corrected
            } else {
                Log.d(TAG, "신형 번호판 패턴 검증 실패: 유효하지 않은 한글 문자 - $hangulChar")
                return ""
            }
        } else if (BUSINESS_LICENSE_PATTERN.matcher(corrected).matches()) {
            val region = corrected.substring(0, 2)
            val typeChar = corrected.substring(4, 5).firstOrNull()

            if (regionCodes.contains(region) && (typeChar == null || typeChar in allowedTypeChars)) {
                return corrected
            } else {
                Log.d(TAG, "사업용 번호판 패턴 검증 실패: 지역명 $region 또는 유형 문자 $typeChar 오류")
                return ""
            }
        } else if (OLD_CAR_PATTERN.matcher(corrected).matches()) {
            val hangulChar = corrected.filter { it.toString().matches("[가-힣]".toRegex()) }.firstOrNull()
            if (hangulChar != null && hangulChar in allowedTypeChars) {
                return corrected
            } else {
                Log.d(TAG, "구형 번호판 패턴 검증 실패: 유효하지 않은 한글 문자 - $hangulChar")
                return ""
            }
        } else {
            for (pattern in LICENSE_PATTERNS) {
                if (pattern.matcher(corrected).matches()) {
                    val hangulChar = corrected.filter { it.toString().matches("[가-힣]".toRegex()) }.firstOrNull()
                    if (hangulChar != null && hangulChar in allowedTypeChars) {
                        return corrected
                    } else {
                        Log.d(TAG, "기타 번호판 패턴 검증 실패: 유효하지 않은 한글 문자 - $hangulChar")
                        return ""
                    }
                }
            }
        }

        Log.d(TAG, "번호판 패턴 검증 실패: $corrected")
        return ""
    }

    private fun findPlateRegion(text: Text): Rect? {
        // 기존 코드와 동일
        var bestRect: Rect? = null
        var highestConfidence = 0f

        for (block in text.textBlocks) {
            for (line in block.lines) {
                val lineText = line.text.replace("\\s+".toRegex(), "")

                LICENSE_PATTERNS.forEach { pattern ->
                    if (pattern.matcher(lineText).find()) {
                        val confidence = calculateConfidence(line)
                        if (confidence > highestConfidence) {
                            highestConfidence = confidence
                            bestRect = line.boundingBox
                        }
                    }
                }
            }
        }

        bestRect?.let {
            val expandedRect = Rect(
                it.left - (it.width() * 0.1).toInt().coerceAtLeast(0),
                it.top - (it.height() * 0.2).toInt().coerceAtLeast(0),
                it.right + (it.width() * 0.1).toInt(),
                it.bottom + (it.height() * 0.2).toInt()
            )
            return expandedRect
        }

        return bestRect
    }

    private fun sendTextOnly(licensePlate: String) {
        // 기존 코드와 동일
        if (licensePlate.isEmpty()) {
            serverStatusListener("전송 실패: 번호판 텍스트 없음")
            return
        }

        val savedCampingId = getSavedCampingId()

        val jsonObject = JSONObject().apply {
            put("licensePlate", licensePlate)
            put("timestamp", System.currentTimeMillis())
            put("deviceId", android.os.Build.MODEL)
            put("camping_id", savedCampingId)
        }

        val requestBody = MultipartBody.Builder()
            .setType(MultipartBody.FORM)
            .addFormDataPart("data", jsonObject.toString())
            .build()

        sendRequest(requestBody)
    }

    private fun getSavedCampingId(): String {
        return sharedPreferences.getString("camping_id", "") ?: "없음"
    }

    private fun sendFullFrame(licensePlate: String, bitmap: Bitmap) {
        sendWithImage(licensePlate, bitmap, "$licensePlate.jpg")
    }

    private fun sendCroppedPlateImage(licensePlate: String, text: Text, bitmap: Bitmap) {
        // OpenCV로 감지된 번호판 영역 사용
        val plateRect = detectLicensePlateRegion(bitmap) ?: findPlateRegion(text)

        if (plateRect != null) {
            val left = plateRect.left.coerceAtLeast(0)
            val top = plateRect.top.coerceAtLeast(0)
            val width = plateRect.width().coerceAtMost(bitmap.width - left)
            val height = plateRect.height().coerceAtMost(bitmap.height - top)

            if (width > 0 && height > 0) {
                val croppedBitmap = Bitmap.createBitmap(bitmap, left, top, width, height)
                sendWithImage(licensePlate, croppedBitmap, "cropped_plate.jpg")
            } else {
                sendWithImage(licensePlate, bitmap, "$licensePlate.jpg")
            }
        } else {
            sendWithImage(licensePlate, bitmap, "$licensePlate.jpg")
        }
    }

    private fun sendWithImage(licensePlate: String, imageBitmap: Bitmap, fileName: String) {
        // 기존 코드와 동일
        if (licensePlate.isEmpty()) {
            serverStatusListener("전송 실패: 번호판 텍스트 없음")
            return
        }

        val jsonObject = JSONObject().apply {
            put("licensePlate", licensePlate)
            put("timestamp", System.currentTimeMillis())
            put("deviceId", android.os.Build.MODEL)
            put("confidence", recentDetections[licensePlate] ?: 1)
            put("camping_id", getSavedCampingId())
        }

        val byteArrayOutputStream = ByteArrayOutputStream()
        imageBitmap.compress(Bitmap.CompressFormat.JPEG, 80, byteArrayOutputStream)
        val imageData = byteArrayOutputStream.toByteArray()

        val requestBody = MultipartBody.Builder()
            .setType(MultipartBody.FORM)
            .addFormDataPart("data", jsonObject.toString())
            .addFormDataPart("image", fileName, RequestBody.create("image/jpeg".toMediaTypeOrNull(), imageData))
            .build()

        sendRequest(requestBody)
    }

    private fun sendRequest(requestBody: RequestBody) {
        // 기존 코드와 동일
        val request = Request.Builder()
            .url(SERVER_URL)
            .post(requestBody)
            .build()

        serverStatusListener("서버로 전송 중...")

        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                serverStatusListener("전송 실패: ${e.message}")
            }

            override fun onResponse(call: Call, response: Response) {
                if (response.isSuccessful) {
                    val responseBody = response.body?.string()
                    try {
                        val jsonObject = JSONObject(responseBody)
                        val message = jsonObject.getString("message")
                        serverStatusListener("전송 성공: $message")
                    } catch (e: JSONException) {
                        serverStatusListener("응답 본문 파싱 오류")
                    }
                } else {
                    serverStatusListener("전송 실패: 서버 오류 ${response.code}")
                }
            }
        })
    }

    companion object {
        private const val TAG = "EnhancedLicensePlateProcessor"
        private const val SERVER_URL = "https://admin.campingfriend.co.kr/api/license"
        private const val IMAGE_SEND_MODE = "FULL_FRAME" // 전송 모드: "NONE", "FULL_FRAME", "CROPPED_PLATE"
        private const val DETECTION_COOLDOWN_MS = 3000L
        private const val SERVER_SEND_COOLDOWN_MS = 5000L

        // 기존 번호판 패턴 정의
        private val OLD_CAR_PATTERN = Pattern.compile("\\d{2,3}[가-힣]\\d{4}")
        private val NEW_CAR_PATTERN = Pattern.compile("\\d{2,3}[가-힣]\\d{4}")
        private val BUSINESS_LICENSE_PATTERN = Pattern.compile("[가-힣]{2}\\d{2}[가-힣]\\d{4}")
        private val RENTAL_CAR_PATTERN = Pattern.compile("\\d{2,3}[하-힣]\\d{4}")
        private val TAXI_PATTERN = Pattern.compile("\\d{2,3}[바-사]\\d{4}")
        private val DIPLOMATIC_PATTERN = Pattern.compile("\\d{2,3}[아-자]\\d{4}")
        private val TEMPORARY_PATTERN = Pattern.compile("\\d{2,3}[파-하]\\d{4}")

        private val LICENSE_PATTERNS = listOf(
            OLD_CAR_PATTERN,
            NEW_CAR_PATTERN,
            BUSINESS_LICENSE_PATTERN,
            RENTAL_CAR_PATTERN,
            TAXI_PATTERN,
            DIPLOMATIC_PATTERN,
            TEMPORARY_PATTERN
        )
    }
}



// 이미지 변환 확장 함수
fun ImageProxy.toBitmap(): Bitmap? {
    val buffer = planes[0].buffer
    val bytes = ByteArray(buffer.remaining())
    buffer.get(bytes)
    return BitmapFactory.decodeByteArray(bytes, 0, bytes.size)
}